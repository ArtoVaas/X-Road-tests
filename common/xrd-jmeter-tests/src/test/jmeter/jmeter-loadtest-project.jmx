<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="proto" elementType="Argument">
            <stringProp name="Argument.name">proto</stringProp>
            <stringProp name="Argument.value">${__P(proto,http)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__P(host,xtee6.ci.kit)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Hostname or IP of Webservice/SecurityServer</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(port,80)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path" elementType="Argument">
            <stringProp name="Argument.name">path</stringProp>
            <stringProp name="Argument.value">${__P(path,/)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loadtest-threads" elementType="Argument">
            <stringProp name="Argument.name">loadtest-threads</stringProp>
            <stringProp name="Argument.value">${__P(threads,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loadtest-duration" elementType="Argument">
            <stringProp name="Argument.name">loadtest-duration</stringProp>
            <stringProp name="Argument.value">${__P(duration,60)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loadtest-rampup" elementType="Argument">
            <stringProp name="Argument.name">loadtest-rampup</stringProp>
            <stringProp name="Argument.value">${__P(rampup,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="warmup-threads" elementType="Argument">
            <stringProp name="Argument.name">warmup-threads</stringProp>
            <stringProp name="Argument.value">${__P(wthreads,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="warmup-duration" elementType="Argument">
            <stringProp name="Argument.name">warmup-duration</stringProp>
            <stringProp name="Argument.value">${__P(wduration,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="warmup-rampup" elementType="Argument">
            <stringProp name="Argument.name">warmup-rampup</stringProp>
            <stringProp name="Argument.value">${__P(wrampup,2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XRoadInstance" elementType="Argument">
            <stringProp name="Argument.name">XRoadInstance</stringProp>
            <stringProp name="Argument.value">${__P(XRoadInstance,XTEE-CI)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ClientMemberClass" elementType="Argument">
            <stringProp name="Argument.name">ClientMemberClass</stringProp>
            <stringProp name="Argument.value">${__P(ClientMemberClass,COM)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ClientMemberCode" elementType="Argument">
            <stringProp name="Argument.name">ClientMemberCode</stringProp>
            <stringProp name="Argument.value">${__P(ClientMemberCode,00000002)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ClientSubsystemCode" elementType="Argument">
            <stringProp name="Argument.name">ClientSubsystemCode</stringProp>
            <stringProp name="Argument.value">${__P(ClientSubsystemCode,MockSystem)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ServiceMemberClass" elementType="Argument">
            <stringProp name="Argument.name">ServiceMemberClass</stringProp>
            <stringProp name="Argument.value">${__P(ServiceMemberClass,COM)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ServiceMemberCode" elementType="Argument">
            <stringProp name="Argument.name">ServiceMemberCode</stringProp>
            <stringProp name="Argument.value">${__P(ServiceMemberCode,00000002)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ServiceSubsystemCode" elementType="Argument">
            <stringProp name="Argument.name">ServiceSubsystemCode</stringProp>
            <stringProp name="Argument.value">${__P(ServiceSubsystemCode,MockSystem)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port">${port}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">${proto}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">${path}</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="warmup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${warmup-threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${warmup-rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1375525852000</longProp>
        <longProp name="ThreadGroup.end_time">1375525852000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${warmup-duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="warmup-mock" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;SOAP-ENV:Envelope&#xd;
    xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&#xd;
    xmlns:ns1=&quot;http://producer.x-road.eu&quot;&#xd;
    xmlns:xrd=&quot;http://x-road.eu/xsd/xroad.xsd&quot;&#xd;
    xmlns:id=&quot;http://x-road.eu/xsd/identifiers&quot;&gt;&#xd;
  &lt;SOAP-ENV:Header&gt;&#xd;
    &lt;xrd:client id:objectType=&quot;SUBSYSTEM&quot;&gt;&#xd;
      &lt;id:xRoadInstance&gt;${XRoadInstance}&lt;/id:xRoadInstance&gt;&#xd;
      &lt;id:memberClass&gt;${ClientMemberClass}&lt;/id:memberClass&gt;&#xd;
      &lt;id:memberCode&gt;${ClientMemberCode}&lt;/id:memberCode&gt;&#xd;
      &lt;id:subsystemCode&gt;${ClientSubsystemCode}&lt;/id:subsystemCode&gt;&#xd;
    &lt;/xrd:client&gt;&#xd;
    &lt;xrd:service id:objectType=&quot;SERVICE&quot;&gt;&#xd;
      &lt;id:xRoadInstance&gt;${XRoadInstance}&lt;/id:xRoadInstance&gt;&#xd;
      &lt;id:memberClass&gt;${ServiceMemberClass}&lt;/id:memberClass&gt;&#xd;
      &lt;id:memberCode&gt;${ServiceMemberCode}&lt;/id:memberCode&gt;&#xd;
      &lt;id:subsystemCode&gt;${ServiceSubsystemCode}&lt;/id:subsystemCode&gt;&#xd;
      &lt;id:serviceCode&gt;mock&lt;/id:serviceCode&gt;&#xd;
      &lt;id:serviceVersion&gt;v1&lt;/id:serviceVersion&gt;&#xd;
    &lt;/xrd:service&gt;&#xd;
    &lt;xrd:id&gt;${__UUID()}&lt;/xrd:id&gt;&#xd;
    &lt;xrd:userId&gt;EE12345678901&lt;/xrd:userId&gt;&#xd;
    &lt;xrd:issue&gt;12345&lt;/xrd:issue&gt;&#xd;
    &lt;xrd:protocolVersion&gt;4.0&lt;/xrd:protocolVersion&gt;&#xd;
  &lt;/SOAP-ENV:Header&gt;&#xd;
  &lt;SOAP-ENV:Body&gt;&#xd;
    &lt;ns1:mock&gt;&#xd;
      &lt;ns1:mock/&gt;&#xd;
    &lt;/ns1:mock&gt;&#xd;
  &lt;/SOAP-ENV:Body&gt;&#xd;
&lt;/SOAP-ENV:Envelope&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="load-test-mock" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${loadtest-threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${loadtest-rampup}</stringProp>
        <longProp name="ThreadGroup.start_time">1375525852000</longProp>
        <longProp name="ThreadGroup.end_time">1375525852000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${loadtest-duration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="mock_bodyData_10KB" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;SOAP-ENV:Envelope&#xd;
    xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&#xd;
    xmlns:ns1=&quot;http://producer.x-road.eu&quot;&#xd;
    xmlns:xrd=&quot;http://x-road.eu/xsd/xroad.xsd&quot;&#xd;
    xmlns:id=&quot;http://x-road.eu/xsd/identifiers&quot;&gt;&#xd;
  &lt;SOAP-ENV:Header&gt;&#xd;
    &lt;xrd:client id:objectType=&quot;SUBSYSTEM&quot;&gt;&#xd;
      &lt;id:xRoadInstance&gt;${XRoadInstance}&lt;/id:xRoadInstance&gt;&#xd;
      &lt;id:memberClass&gt;${ClientMemberClass}&lt;/id:memberClass&gt;&#xd;
      &lt;id:memberCode&gt;${ClientMemberCode}&lt;/id:memberCode&gt;&#xd;
      &lt;id:subsystemCode&gt;${ClientSubsystemCode}&lt;/id:subsystemCode&gt;&#xd;
    &lt;/xrd:client&gt;&#xd;
    &lt;xrd:service id:objectType=&quot;SERVICE&quot;&gt;&#xd;
      &lt;id:xRoadInstance&gt;${XRoadInstance}&lt;/id:xRoadInstance&gt;&#xd;
      &lt;id:memberClass&gt;${ServiceMemberClass}&lt;/id:memberClass&gt;&#xd;
      &lt;id:memberCode&gt;${ServiceMemberCode}&lt;/id:memberCode&gt;&#xd;
      &lt;id:subsystemCode&gt;${ServiceSubsystemCode}&lt;/id:subsystemCode&gt;&#xd;
      &lt;id:serviceCode&gt;mock&lt;/id:serviceCode&gt;&#xd;
      &lt;id:serviceVersion&gt;v1&lt;/id:serviceVersion&gt;&#xd;
    &lt;/xrd:service&gt;&#xd;
    &lt;xrd:id&gt;${__UUID()}&lt;/xrd:id&gt;&#xd;
    &lt;xrd:userId&gt;EE12345678901&lt;/xrd:userId&gt;&#xd;
    &lt;xrd:issue&gt;12345&lt;/xrd:issue&gt;&#xd;
    &lt;xrd:protocolVersion&gt;4.0&lt;/xrd:protocolVersion&gt;&#xd;
  &lt;/SOAP-ENV:Header&gt;&#xd;
  &lt;SOAP-ENV:Body&gt;&#xd;
    &lt;ns1:mock&gt;&#xd;
      &lt;desiredResponse&gt;bodyData_10KB&lt;/desiredResponse&gt;&#xd;
    &lt;/ns1:mock&gt;&#xd;
  &lt;/SOAP-ENV:Body&gt;&#xd;
&lt;/SOAP-ENV:Envelope&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="has-correct-body" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="529580979">&lt;data&gt;1234567890</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Verify content in response</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="not-soap-fault" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2097215100">Fault&gt;</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Verify content in response</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true"/>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Save Failures" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">~/../../../target/jmeter-errors.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
